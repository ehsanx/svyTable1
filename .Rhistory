dat.full$gender <- factor(dat.full$RIAGENDR, levels = c(1, 2), labels = c("Male", "Female"))
# *** THIS IS THE CORRECTED CODE FOR THE 'race' VARIABLE ***
dat.full <- dat.full %>%
mutate(race = case_when(
RIDRETH3 %in% c(1, 2) ~ "Hispanic",
RIDRETH3 == 3 ~ "White",
RIDRETH3 == 4 ~ "Black",
RIDRETH3 == 5 ~ "Other",   # This was the missing category causing the error
RIDRETH3 == 6 ~ "Asian",
TRUE ~ NA_character_
))
# Set the desired factor level order for the table output
dat.full$race <- factor(dat.full$race, levels = c("White", "Black", "Asian", "Hispanic", "Other"))
# Create an indicator variable to identify our final analytic sample
dat.full$analytic_sample <- ifelse(dat.full$SEQN %in% dat.analytic$SEQN, 1, 0)
# --- Generate the Weighted Tables using the Correct Workflow ---
# Create ONE main survey design object from the full data
svy.design.full <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~WTINT2YR,
data = dat.full,
nest = TRUE)
# Subset the main design to just our analytic sample
svy.design.analytic <- subset(svy.design.full, analytic_sample == 1)
# --- Call svytable1234 on the Subsetted Design Objects ---
# These calls will now succeed because the data is correct and the
# function handles lonely PSUs internally.
# -- Part A: Overall Table --
table_overall <- svytable1234(design = svy.design.analytic,
strata_var = "race",
table_vars = "age",
mode = "mixed")
load("E:/GitHub/EpiMethods/Data/surveydata/Flegal2016.RData")
# --- 1. Load Required Libraries ---
# This script requires the 'survey' and 'dplyr' packages.
# If you don't have them, run: install.packages(c("survey", "dplyr"))
library(survey)
library(dplyr)
# --- 2. The Final, Self-Contained svytable1 Function ---
# This function is robust and handles survey complexities internally.
svytable1 <- function(design, strata_var, table_vars,
mode = "mixed", commas = TRUE) {
# --- Lonely PSU Handling ---
old_option <- getOption("survey.lonely.psu")
options(survey.lonely.psu = "adjust")
on.exit(options(survey.lonely.psu = old_option))
# --- Input Validation ---
df <- design$variables
all_vars <- c(strata_var, table_vars)
missing_vars <- all_vars[!all_vars %in% names(df)]
if (length(missing_vars) > 0) {
stop(paste("The following variables were not found in the data:",
paste(missing_vars, collapse = ", ")))
}
# --- Helper function for formatting ---
format_num <- function(n, is_weighted) {
if (is_weighted) n <- round(n)
if (commas) return(format(n, big.mark = ","))
return(as.character(n))
}
# --- Table Generation ---
if (nrow(df) == 0) return(data.frame(Error = "Input data has 0 rows"))
if(!is.factor(df[[strata_var]])) df[[strata_var]] <- factor(df[[strata_var]])
df[[strata_var]] <- droplevels(df[[strata_var]])
strata_levels <- levels(df[[strata_var]])
unweighted_n_overall <- nrow(df)
unweighted_n_strata <- table(df[[strata_var]])
header_row <- data.frame(Variable = "n", Level = "")
if (mode == "mixed") {
header_row$Overall <- format_num(unweighted_n_overall, FALSE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(unweighted_n_strata[lvl], FALSE)
} else if (mode == "weighted") {
weighted_n_strata <- svytable(stats::as.formula(paste0("~", strata_var)), design)
header_row$Overall <- format_num(sum(stats::weights(design)), TRUE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(weighted_n_strata[lvl], TRUE)
} else { # unweighted
header_row$Overall <- format_num(unweighted_n_overall, FALSE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(unweighted_n_strata[lvl], FALSE)
}
results_list <- list(header_row)
for (var in table_vars) {
var_formula <- stats::as.formula(paste0("~", var))
strata_formula <- stats::as.formula(paste0("~", strata_var))
var_header_row <- as.data.frame(setNames(as.list(c(var, rep("", ncol(header_row) - 1))), names(header_row)))
results_list[[length(results_list) + 1]] <- var_header_row
if (is.factor(df[[var]])) {
df[[var]] <- droplevels(df[[var]])
unweighted_counts_overall <- table(df[[var]])
unweighted_pcts_overall <- stats::prop.table(unweighted_counts_overall) * 100
unweighted_counts_strata <- table(df[[var]], df[[strata_var]])
unweighted_pcts_strata <- stats::prop.table(unweighted_counts_strata, margin = 2) * 100
if (mode %in% c("weighted", "mixed")) {
weighted_counts_overall <- svytable(var_formula, design)
weighted_pcts_overall <- svymean(var_formula, design, na.rm = TRUE) * 100
weighted_counts_strata <- svytable(stats::as.formula(paste0("~", var, "+", strata_var)), design)
weighted_pcts_strata <- svyby(var_formula, strata_formula, design, svymean, na.rm = TRUE)
}
for (lvl in levels(df[[var]])) {
row_data <- data.frame(Variable = "", Level = lvl, stringsAsFactors = FALSE)
if (mode == "mixed") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_overall[lvl], FALSE),
weighted_pcts_overall[paste0(var, lvl)])
} else if (mode == "weighted") {
val <- sprintf("%s (%.1f%%)", format_num(weighted_counts_overall[lvl], TRUE),
weighted_pcts_overall[paste0(var, lvl)])
} else {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_overall[lvl], FALSE),
unweighted_pcts_overall[lvl])
}
row_data$Overall <- val
for (s_lvl in strata_levels) {
if (mode == "mixed") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], FALSE),
weighted_pcts_strata[s_lvl, paste0(var, lvl)] * 100)
} else if (mode == "weighted") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], TRUE),
weighted_pcts_strata[s_lvl, paste0(var, lvl)] * 100)
} else {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], FALSE),
unweighted_pcts_strata[lvl, s_lvl])
}
row_data[[s_lvl]] <- val
}
results_list[[length(results_list) + 1]] <- row_data
}
} else if (is.numeric(df[[var]])) {
unweighted_mean_overall <- mean(df[[var]], na.rm = TRUE)
unweighted_sd_overall <- stats::sd(df[[var]], na.rm = TRUE)
unweighted_mean_strata <- tapply(df[[var]], df[[strata_var]], mean, na.rm = TRUE)
unweighted_sd_strata <- tapply(df[[var]], df[[strata_var]], stats::sd, na.rm = TRUE)
if (mode %in% c("weighted", "mixed")) {
weighted_mean_overall <- svymean(var_formula, design, na.rm = TRUE)
weighted_var_overall <- svyvar(var_formula, design, na.rm = TRUE)
weighted_stats_strata <- svyby(var_formula, strata_formula, design, svymean, na.rm = TRUE)
weighted_var_strata <- svyby(var_formula, strata_formula, design, svyvar, na.rm = TRUE)
}
row_data <- data.frame(Variable = "", Level = "Mean (SD)", stringsAsFactors = FALSE)
if (mode %in% c("mixed", "weighted")) {
val <- sprintf("%.2f (%.2f)", weighted_mean_overall, sqrt(weighted_var_overall))
} else {
val <- sprintf("%.2f (%.2f)", unweighted_mean_overall, unweighted_sd_overall)
}
row_data$Overall <- val
for (i in seq_along(strata_levels)) {
s_lvl <- strata_levels[i]
if (mode %in% c("mixed", "weighted")) {
mean_val <- weighted_stats_strata[i, var]
sd_val <- sqrt(weighted_var_strata[i, var])
val <- sprintf("%.2f (%.2f)", mean_val, sd_val)
} else {
val <- sprintf("%.2f (%.2f)", unweighted_mean_strata[s_lvl], unweighted_sd_strata[s_lvl])
}
row_data[[s_lvl]] <- val
}
results_list[[length(results_list) + 1]] <- row_data
}
}
final_table <- do.call(rbind, results_list)
return(final_table)
}
# --- 3. Running Example: Flegal (2016) NHANES Data ---
# --- Data Preparation ---
# Load the dataset from a working URL.
load("E:/GitHub/EpiMethods/Data/surveydata/Flegal2016.RData")
# Create the final analytic sample to identify which rows to include (N=5,455)
dat.analytic <- subset(dat.full, RIDAGEYR >= 20 & !is.na(BMXBMI) & (is.na(RIDEXPRG) | RIDEXPRG != 1))
# --- Create Analysis Variables in the Full Dataset ---
dat.full$age <- cut(dat.full$RIDAGEYR, c(20, 40, 60, Inf), right = FALSE, labels = c("20-39", "40-59", "60+"))
dat.full$gender <- factor(dat.full$RIAGENDR, levels = c(1, 2), labels = c("Male", "Female"))
# *** THIS IS THE CORRECTED CODE FOR THE 'race' VARIABLE ***
# The original RIDRETH3 is a factor; we use case_when on its levels.
dat.full <- dat.full %>%
mutate(race = case_when(
RIDRETH3 == "Mexican American" ~ "Hispanic",
RIDRETH3 == "Other Hispanic" ~ "Hispanic",
RIDRETH3 == "Non-Hispanic White" ~ "White",
RIDRETH3 == "Non-Hispanic Black" ~ "Black",
RIDRETH3 == "Non-Hispanic Asian" ~ "Asian",
RIDRETH3 == "Other Race - Including Multi-Racial" ~ "Other",
TRUE ~ NA_character_
))
# Set the desired factor level order for the table output
dat.full$race <- factor(dat.full$race, levels = c("White", "Black", "Asian", "Hispanic", "Other"))
# Create an indicator variable to identify our final analytic sample
dat.full$analytic_sample <- ifelse(dat.full$SEQN %in% dat.analytic$SEQN, 1, 0)
# --- Generate the Weighted Tables using the Correct Workflow ---
# Create ONE main survey design object from the full data
svy.design.full <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~WTINT2YR,
data = dat.full,
nest = TRUE)
# Subset the main design to just our analytic sample
svy.design.analytic <- subset(svy.design.full, analytic_sample == 1)
# --- Call svytable1 on the Subsetted Design Objects ---
# These calls will now succeed because the data is correct and the
# function handles lonely PSUs internally.
# -- Part A: Overall Table --
table_overall <- svytable1(design = svy.design.analytic,
strata_var = "race",
table_vars = "age",
mode = "mixed")
# --- 1. Load Required Libraries ---
# This script requires the 'survey' and 'dplyr' packages.
# If you don't have them, run: install.packages(c("survey", "dplyr"))
library(survey)
library(dplyr)
# --- 2. The Final, Self-Contained svytable1 Function ---
# This function is robust and handles survey complexities internally.
svytable1 <- function(design, strata_var, table_vars,
mode = "mixed", commas = TRUE) {
# --- Lonely PSU Handling ---
old_option <- getOption("survey.lonely.psu")
options(survey.lonely.psu = "adjust")
on.exit(options(survey.lonely.psu = old_option))
# --- Input Validation ---
df <- design$variables
all_vars <- c(strata_var, table_vars)
missing_vars <- all_vars[!all_vars %in% names(df)]
if (length(missing_vars) > 0) {
stop(paste("The following variables were not found in the data:",
paste(missing_vars, collapse = ", ")))
}
# --- Helper function for formatting ---
format_num <- function(n, is_weighted) {
if (is_weighted) n <- round(n)
if (commas) return(format(n, big.mark = ","))
return(as.character(n))
}
# --- Table Generation ---
if (nrow(df) == 0) return(data.frame(Error = "Input data has 0 rows"))
if(!is.factor(df[[strata_var]])) df[[strata_var]] <- factor(df[[strata_var]])
df[[strata_var]] <- droplevels(df[[strata_var]])
strata_levels <- levels(df[[strata_var]])
unweighted_n_overall <- nrow(df)
unweighted_n_strata <- table(df[[strata_var]])
header_row <- data.frame(Variable = "n", Level = "")
if (mode == "mixed") {
header_row$Overall <- format_num(unweighted_n_overall, FALSE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(unweighted_n_strata[lvl], FALSE)
} else if (mode == "weighted") {
weighted_n_strata <- svytable(stats::as.formula(paste0("~", strata_var)), design)
header_row$Overall <- format_num(sum(stats::weights(design)), TRUE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(weighted_n_strata[lvl], TRUE)
} else { # unweighted
header_row$Overall <- format_num(unweighted_n_overall, FALSE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(unweighted_n_strata[lvl], FALSE)
}
results_list <- list(header_row)
for (var in table_vars) {
var_formula <- stats::as.formula(paste0("~", var))
strata_formula <- stats::as.formula(paste0("~", strata_var))
var_header_row <- as.data.frame(setNames(as.list(c(var, rep("", ncol(header_row) - 1))), names(header_row)))
results_list[[length(results_list) + 1]] <- var_header_row
if (is.factor(df[[var]])) {
df[[var]] <- droplevels(df[[var]])
unweighted_counts_overall <- table(df[[var]])
unweighted_pcts_overall <- stats::prop.table(unweighted_counts_overall) * 100
unweighted_counts_strata <- table(df[[var]], df[[strata_var]])
unweighted_pcts_strata <- stats::prop.table(unweighted_counts_strata, margin = 2) * 100
if (mode %in% c("weighted", "mixed")) {
weighted_counts_overall <- svytable(var_formula, design)
weighted_pcts_overall <- svymean(var_formula, design, na.rm = TRUE) * 100
weighted_counts_strata <- svytable(stats::as.formula(paste0("~", var, "+", strata_var)), design)
weighted_pcts_strata <- svyby(var_formula, strata_formula, design, svymean, na.rm = TRUE)
}
for (lvl in levels(df[[var]])) {
row_data <- data.frame(Variable = "", Level = lvl, stringsAsFactors = FALSE)
if (mode == "mixed") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_overall[lvl], FALSE),
weighted_pcts_overall[paste0(var, lvl)])
} else if (mode == "weighted") {
val <- sprintf("%s (%.1f%%)", format_num(weighted_counts_overall[lvl], TRUE),
weighted_pcts_overall[paste0(var, lvl)])
} else {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_overall[lvl], FALSE),
unweighted_pcts_overall[lvl])
}
row_data$Overall <- val
for (s_lvl in strata_levels) {
if (mode == "mixed") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], FALSE),
weighted_pcts_strata[s_lvl, paste0(var, lvl)] * 100)
} else if (mode == "weighted") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], TRUE),
weighted_pcts_strata[s_lvl, paste0(var, lvl)] * 100)
} else {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], FALSE),
unweighted_pcts_strata[lvl, s_lvl])
}
row_data[[s_lvl]] <- val
}
results_list[[length(results_list) + 1]] <- row_data
}
} else if (is.numeric(df[[var]])) {
unweighted_mean_overall <- mean(df[[var]], na.rm = TRUE)
unweighted_sd_overall <- stats::sd(df[[var]], na.rm = TRUE)
unweighted_mean_strata <- tapply(df[[var]], df[[strata_var]], mean, na.rm = TRUE)
unweighted_sd_strata <- tapply(df[[var]], df[[strata_var]], stats::sd, na.rm = TRUE)
if (mode %in% c("weighted", "mixed")) {
weighted_mean_overall <- svymean(var_formula, design, na.rm = TRUE)
weighted_var_overall <- svyvar(var_formula, design, na.rm = TRUE)
weighted_stats_strata <- svyby(var_formula, strata_formula, design, svymean, na.rm = TRUE)
weighted_var_strata <- svyby(var_formula, strata_formula, design, svyvar, na.rm = TRUE)
}
row_data <- data.frame(Variable = "", Level = "Mean (SD)", stringsAsFactors = FALSE)
if (mode %in% c("mixed", "weighted")) {
val <- sprintf("%.2f (%.2f)", weighted_mean_overall, sqrt(weighted_var_overall))
} else {
val <- sprintf("%.2f (%.2f)", unweighted_mean_overall, unweighted_sd_overall)
}
row_data$Overall <- val
for (i in seq_along(strata_levels)) {
s_lvl <- strata_levels[i]
if (mode %in% c("mixed", "weighted")) {
mean_val <- weighted_stats_strata[i, var]
sd_val <- sqrt(weighted_var_strata[i, var])
val <- sprintf("%.2f (%.2f)", mean_val, sd_val)
} else {
val <- sprintf("%.2f (%.2f)", unweighted_mean_strata[s_lvl], unweighted_sd_strata[s_lvl])
}
row_data[[s_lvl]] <- val
}
results_list[[length(results_list) + 1]] <- row_data
}
}
final_table <- do.call(rbind, results_list)
return(final_table)
}
# --- 3. Running Example: Flegal (2016) NHANES Data ---
# --- Data Preparation ---
# Load the dataset from a working URL.
load(url("https://raw.githubusercontent.com/epiverse-trace/datasets/raw/main/RData/Flegal2016.RData"))
load("E:/GitHub/EpiMethods/Data/surveydata/Flegal2016.RData")
# --- 1. Load Required Libraries ---
# This script requires the 'survey' and 'dplyr' packages.
# If you don't have them, run: install.packages(c("survey", "dplyr"))
library(survey)
library(dplyr)
# --- 2. The Final, Self-Contained svytable1 Function ---
# This function is robust and handles survey complexities internally.
svytable1 <- function(design, strata_var, table_vars,
mode = "mixed", commas = TRUE) {
# --- Lonely PSU Handling ---
old_option <- getOption("survey.lonely.psu")
options(survey.lonely.psu = "adjust")
on.exit(options(survey.lonely.psu = old_option))
# --- Input Validation ---
df <- design$variables
all_vars <- c(strata_var, table_vars)
missing_vars <- all_vars[!all_vars %in% names(df)]
if (length(missing_vars) > 0) {
stop(paste("The following variables were not found in the data:",
paste(missing_vars, collapse = ", ")))
}
# --- Helper function for formatting ---
format_num <- function(n, is_weighted) {
if (is_weighted) n <- round(n)
if (commas) return(format(n, big.mark = ","))
return(as.character(n))
}
# --- Table Generation ---
if (nrow(df) == 0) return(data.frame(Error = "Input data has 0 rows"))
if(!is.factor(df[[strata_var]])) df[[strata_var]] <- factor(df[[strata_var]])
df[[strata_var]] <- droplevels(df[[strata_var]])
strata_levels <- levels(df[[strata_var]])
unweighted_n_overall <- nrow(df)
unweighted_n_strata <- table(df[[strata_var]])
header_row <- data.frame(Variable = "n", Level = "")
if (mode == "mixed") {
header_row$Overall <- format_num(unweighted_n_overall, FALSE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(unweighted_n_strata[lvl], FALSE)
} else if (mode == "weighted") {
weighted_n_strata <- svytable(stats::as.formula(paste0("~", strata_var)), design)
header_row$Overall <- format_num(sum(stats::weights(design)), TRUE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(weighted_n_strata[lvl], TRUE)
} else { # unweighted
header_row$Overall <- format_num(unweighted_n_overall, FALSE)
for (lvl in strata_levels)
header_row[[lvl]] <- format_num(unweighted_n_strata[lvl], FALSE)
}
results_list <- list(header_row)
for (var in table_vars) {
var_formula <- stats::as.formula(paste0("~", var))
strata_formula <- stats::as.formula(paste0("~", strata_var))
var_header_row <- as.data.frame(setNames(as.list(c(var, rep("", ncol(header_row) - 1))), names(header_row)))
results_list[[length(results_list) + 1]] <- var_header_row
if (is.factor(df[[var]])) {
df[[var]] <- droplevels(df[[var]])
unweighted_counts_overall <- table(df[[var]])
unweighted_pcts_overall <- stats::prop.table(unweighted_counts_overall) * 100
unweighted_counts_strata <- table(df[[var]], df[[strata_var]])
unweighted_pcts_strata <- stats::prop.table(unweighted_counts_strata, margin = 2) * 100
if (mode %in% c("weighted", "mixed")) {
weighted_counts_overall <- svytable(var_formula, design)
weighted_pcts_overall <- svymean(var_formula, design, na.rm = TRUE) * 100
weighted_counts_strata <- svytable(stats::as.formula(paste0("~", var, "+", strata_var)), design)
weighted_pcts_strata <- svyby(var_formula, strata_formula, design, svymean, na.rm = TRUE)
}
for (lvl in levels(df[[var]])) {
row_data <- data.frame(Variable = "", Level = lvl, stringsAsFactors = FALSE)
if (mode == "mixed") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_overall[lvl], FALSE),
weighted_pcts_overall[paste0(var, lvl)])
} else if (mode == "weighted") {
val <- sprintf("%s (%.1f%%)", format_num(weighted_counts_overall[lvl], TRUE),
weighted_pcts_overall[paste0(var, lvl)])
} else {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_overall[lvl], FALSE),
unweighted_pcts_overall[lvl])
}
row_data$Overall <- val
for (s_lvl in strata_levels) {
if (mode == "mixed") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], FALSE),
weighted_pcts_strata[s_lvl, paste0(var, lvl)] * 100)
} else if (mode == "weighted") {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], TRUE),
weighted_pcts_strata[s_lvl, paste0(var, lvl)] * 100)
} else {
val <- sprintf("%s (%.1f%%)", format_num(unweighted_counts_strata[lvl, s_lvl], FALSE),
unweighted_pcts_strata[lvl, s_lvl])
}
row_data[[s_lvl]] <- val
}
results_list[[length(results_list) + 1]] <- row_data
}
} else if (is.numeric(df[[var]])) {
unweighted_mean_overall <- mean(df[[var]], na.rm = TRUE)
unweighted_sd_overall <- stats::sd(df[[var]], na.rm = TRUE)
unweighted_mean_strata <- tapply(df[[var]], df[[strata_var]], mean, na.rm = TRUE)
unweighted_sd_strata <- tapply(df[[var]], df[[strata_var]], stats::sd, na.rm = TRUE)
if (mode %in% c("weighted", "mixed")) {
weighted_mean_overall <- svymean(var_formula, design, na.rm = TRUE)
weighted_var_overall <- svyvar(var_formula, design, na.rm = TRUE)
weighted_stats_strata <- svyby(var_formula, strata_formula, design, svymean, na.rm = TRUE)
weighted_var_strata <- svyby(var_formula, strata_formula, design, svyvar, na.rm = TRUE)
}
row_data <- data.frame(Variable = "", Level = "Mean (SD)", stringsAsFactors = FALSE)
if (mode %in% c("mixed", "weighted")) {
val <- sprintf("%.2f (%.2f)", weighted_mean_overall, sqrt(weighted_var_overall))
} else {
val <- sprintf("%.2f (%.2f)", unweighted_mean_overall, unweighted_sd_overall)
}
row_data$Overall <- val
for (i in seq_along(strata_levels)) {
s_lvl <- strata_levels[i]
if (mode %in% c("mixed", "weighted")) {
mean_val <- weighted_stats_strata[i, var]
sd_val <- sqrt(weighted_var_strata[i, var])
val <- sprintf("%.2f (%.2f)", mean_val, sd_val)
} else {
val <- sprintf("%.2f (%.2f)", unweighted_mean_strata[s_lvl], unweighted_sd_strata[s_lvl])
}
row_data[[s_lvl]] <- val
}
results_list[[length(results_list) + 1]] <- row_data
}
}
final_table <- do.call(rbind, results_list)
return(final_table)
}
# --- 3. Running Example: Flegal (2016) NHANES Data ---
# --- Data Preparation ---
# Load the dataset from a working URL.
load("E:/GitHub/EpiMethods/Data/surveydata/Flegal2016.RData")
# Create the final analytic sample to identify which rows to include (N=5,455)
dat.analytic <- subset(dat.full, RIDAGEYR >= 20 & !is.na(BMXBMI) & (is.na(RIDEXPRG) | RIDEXPRG != 1))
# --- Create Analysis Variables in the Full Dataset ---
dat.full$age <- cut(dat.full$RIDAGEYR, c(20, 40, 60, Inf), right = FALSE, labels = c("20-39", "40-59", "60+"))
dat.full$gender <- factor(dat.full$RIAGENDR, levels = c(1, 2), labels = c("Male", "Female"))
# *** THIS IS THE CORRECTED CODE FOR THE 'race' VARIABLE ***
# The original RIDRETH3 is a factor; we use case_when on its levels.
dat.full <- dat.full %>%
mutate(race = case_when(
RIDRETH3 == "Mexican American" ~ "Hispanic",
RIDRETH3 == "Other Hispanic" ~ "Hispanic",
RIDRETH3 == "Non-Hispanic White" ~ "White",
RIDRETH3 == "Non-Hispanic Black" ~ "Black",
RIDRETH3 == "Non-Hispanic Asian" ~ "Asian",
RIDRETH3 == "Other Race - Including Multi-Racial" ~ "Other",
TRUE ~ NA_character_
))
# Set the desired factor level order for the table output
dat.full$race <- factor(dat.full$race, levels = c("White", "Black", "Asian", "Hispanic", "Other"))
# Create an indicator variable to identify our final analytic sample
dat.full$analytic_sample <- ifelse(dat.full$SEQN %in% dat.analytic$SEQN, 1, 0)
# --- Generate the Weighted Tables using the Correct Workflow ---
# Create ONE main survey design object from the full data
svy.design.full <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~WTINT2YR,
data = dat.full,
nest = TRUE)
# Subset the main design to just our analytic sample
svy.design.analytic <- subset(svy.design.full, analytic_sample == 1)
# --- Call svytable1 on the Subsetted Design Objects ---
# These calls will now succeed because the data is correct and the
# function handles lonely PSUs internally.
# -- Part A: Overall Table --
table_overall <- svytable1(design = svy.design.analytic,
strata_var = "race",
table_vars = "age",
mode = "mixed")
