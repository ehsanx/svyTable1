% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jointeffects.R
\name{jointeffects}
\alias{jointeffects}
\title{Calculate Joint Effects from an Interaction Model}
\usage{
jointeffects(
  interaction_model,
  factor1_name,
  factor2_name,
  scale = c("ratio", "log"),
  conf.level = 0.95,
  digits = 2
)
}
\arguments{
\item{interaction_model}{A fitted model object (e.g., `svycoxph`, `svyglm`)
containing a two-way interaction term (e.g., `A*B`).}

\item{factor1_name}{Character string. The name of the first factor variable
in the interaction (e.g., `"Race1"`).}

\item{factor2_name}{Character string. The name of the second factor variable
(e.g., `"ObeseStatus"`).}

\item{scale}{Character string. The scale for the output estimates, CIs, and SE.
Options are `"ratio"` (default, e.g., OR/HR) or `"log"` (log-OR/log-HR).}

\item{conf.level}{Confidence level for the interval (default 0.95).}

\item{digits}{Integer. Number of decimal places for rounding estimates, SE,
and CIs when `scale = "ratio"`. Default is 2. (Set to NULL for no rounding).}
}
\value{
A `tibble` (data frame) with one row for each combination of factor levels.
Columns include:
\itemize{
  \item `Level1`: The level of the first factor.
  \item `Level2`: The level of the second factor.
  \item `Estimate`: The point estimate on the specified `scale`.
  \item `SE`: The standard error on the specified `scale`. Calculated using the
    delta method for `scale = "ratio"`.
  \item `CI.low`: The lower bound of the confidence interval (on the specified `scale`).
  \item `CI.upp`: The upper bound of the confidence interval (on the specified `scale`).
}
}
\description{
Calculates the joint effect for every combination of two interacting
categorical variables, relative to the model's reference group. This
function reproduces the output of a joint-variable model (e.g., `~ A_B`)
using the results from an interaction-term model (e.g., `~ A * B`).
Output can be specified on the log scale (e.g., log-OR/log-HR) or the
ratio scale (e.g., OR/HR).

It works for various model types, including `svyglm`, `svycoxph`, `glm`,
and `coxph`, by dynamically identifying the main effect and interaction
coefficients.
}
\examples{
\donttest{
# --- Load required libraries for the example ---
if (requireNamespace("survey", quietly = TRUE) &&
    requireNamespace("NHANES", quietly = TRUE) &&
    requireNamespace("dplyr", quietly = TRUE) &&
    requireNamespace("tidyr", quietly = TRUE) &&
    requireNamespace("msm", quietly = TRUE)) { # msm needed for ratio SE

  library(survey)
  library(NHANES)
  library(dplyr)
  library(tidyr)
  library(msm) # Load msm

  # --- 1. Data Preparation (NHANES Example) ---
  data(NHANESraw)

  vars_needed <- c("Age", "Race1", "BPSysAve", "BMI", "ObeseStatus", "Hypertension_130",
                   "SDMVPSU", "SDMVSTRA", "WTMEC2YR")

  nhanes_adults_processed <- NHANESraw \%>\%
    filter(Age >= 20) \%>\%
    mutate(
      ObeseStatus = factor(ifelse(BMI >= 30, "Obese", "Not Obese"),
                           levels = c("Not Obese", "Obese")),
      Hypertension_130 = factor(ifelse(BPSysAve >= 130, "Yes", "No"),
                                levels = c("No", "Yes")),
      Race1 = relevel(as.factor(Race1), ref = "White")
    ) \%>\%
    select(all_of(vars_needed)) \%>\%
    drop_na()

  adult_design_binary <- svydesign(
    id = ~SDMVPSU, strata = ~SDMVSTRA, weights = ~WTMEC2YR,
    nest = TRUE, data = nhanes_adults_processed
  )

  # --- 2. Fit the Interaction Model ---
  interaction_model_logit <- svyglm(
    Hypertension_130 ~ Race1 * ObeseStatus + Age,
    design = adult_design_binary, family = quasibinomial()
  )

  # --- 3. Run the function ---

  # Example 1: Output on Ratio scale (default)
  joint_effects_ratio <- jointeffects(
    interaction_model = interaction_model_logit,
    factor1_name = "Race1",
    factor2_name = "ObeseStatus",
    scale = "ratio"
  )
  print("--- Joint Effects (Ratio Scale) ---")
  print(joint_effects_ratio, n = 50)

  # Example 2: Output on Log scale
  joint_effects_log <- jointeffects(
    interaction_model = interaction_model_logit,
    factor1_name = "Race1",
    factor2_name = "ObeseStatus",
    scale = "log"
  )
  print("--- Joint Effects (Log Scale) ---")
  print(joint_effects_log, n = 50)
}
}
}
